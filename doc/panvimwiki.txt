*vimwiki_pandoc.txt*            Filter and convert Vimwiki notes using pandoc.


============================================================================
CONTENTS                                             *vimwiki_pandoc-contents*

1. Introduction..................................|vimwiki_pandoc-introduction|
2. Installation..................................|vimwiki_pandoc-installation|
3. Commands..........................................|vimwiki_pandoc-commands|
  3.1. Command Line Shell..................|vimwiki_pandoc-command_line_shell|
    3.1.1. Pre-filters............................|vimwiki_pandoc-pre-filters|
    3.1.2. Pandoc Filters......................|vimwiki_pandoc-pandoc_filters|
  3.2. Local Commands..........................|vimwiki_pandoc-local_commands|
    3.2.1. VimwikiConvert......................|vimwiki_pandoc-vimwikiconvert|
    3.2.2. VimwikiConvertWeek..............|vimwiki_pandoc-vimwikiconvertweek|
4. Options............................................|vimwiki_pandoc-options|
  4.1. Settings......................................|vimwiki_pandoc-settings|
5. Development and Testing............|vimwiki_pandoc-development_and_testing|
6. Note..................................................|vimwiki_pandoc-note|
7. vimwiki_docx package..................|vimwiki_pandoc-vimwiki_docx_package|
  7.1. Subpackages................................|vimwiki_pandoc-subpackages|
  7.2. Submodules..................................|vimwiki_pandoc-submodules|
  7.3. vimwiki_docx.catvimwiki module.|vimwiki_pandoc-vimwiki_docx.catvimwiki_module|
  7.4. vimwiki_docx.convert module.|vimwiki_pandoc-vimwiki_docx.convert_module|
  7.5. vimwiki_docx.vimwiki_week module.|vimwiki_pandoc-vimwiki_docx.vimwiki_week_module|
  7.6. vimwiki_docx.wiki2pandoc module.|vimwiki_pandoc-vimwiki_docx.wiki2pandoc_module|
  7.7. Module contents........................|vimwiki_pandoc-module_contents|
8. vimwiki_docx.filter package....|vimwiki_pandoc-vimwiki_docx.filter_package|
  8.1. Submodules..................................|vimwiki_pandoc-submodules|
  8.2. vimwiki_docx.filter.delete_bullet_star module.|vimwiki_pandoc-vimwiki_docx.filter.delete_bullet_star_module|
  8.3. vimwiki_docx.filter.delete_empty_heading module.|vimwiki_pandoc-vimwiki_docx.filter.delete_empty_heading_module|
  8.4. vimwiki_docx.filter.delete_tag_lines module.|vimwiki_pandoc-vimwiki_docx.filter.delete_tag_lines_module|
  8.5. vimwiki_docx.filter.delete_task_pending module.|vimwiki_pandoc-vimwiki_docx.filter.delete_task_pending_module|
  8.6. vimwiki_docx.filter.delete_taskwiki_heading module.|vimwiki_pandoc-vimwiki_docx.filter.delete_taskwiki_heading_module|
  8.7. Taskwiki Viewports {#Taskwiki Viewports }.|vimwiki_pandoc-taskwiki_viewports_{#taskwiki_viewports_}|
  8.8. vimwiki_docx.filter.do_nothing module.|vimwiki_pandoc-vimwiki_docx.filter.do_nothing_module|
  8.9. vimwiki_docx.filter.prefilter module.|vimwiki_pandoc-vimwiki_docx.filter.prefilter_module|
  8.10. Module contents.......................|vimwiki_pandoc-module_contents|

============================================================================
INTRODUCTION                                     *vimwiki_pandoc-introduction*

Vimwiki_pandoc provides tools for conversion to Microsoft Word docx or
other output formats supported by
Pandoc (https://pandoc.org/).
Vimwiki_pandoc provides command line tools as well as Vim commands to
concatenate and convert Diary Notes or convert any Vimwiki note.

============================================================================
INSTALLATION                                     *vimwiki_pandoc-installation*

Vimwiki_pandoc requires
Pandoc (https://pandoc.org/).
Installation with conda is recommended because the system version, e.g.,
with Ubuntu, may be too old. Or download from the website.

Using the Vim 8 native packages, vimwiki_pandoc should install in
`pack/*/opt/vimwiki_pandoc` because it depends on |python3| and
requires installation of the python package vimwiki_pandoc.

From a bash shell, enter the following:
>
  # Adjust dest to suit, e.g., $HOME/vimfiles/pack/vimwiki/opt/vimwiki_pandoc
  dest="$HOME/.vim/pack/vimwiki/opt/vimwiki_pandoc"
  git clone https://github.com/jfishe/vimwiki_docx.git "$dest"
  # Activate the python environment used by Vim.
  # Then install vimwiki_docx in that python environment.
  python -m pip install "$dest"
<

Vimwiki_pandoc requires Vim compiled with Python 3, so add the following
to |vimrc| prior to |:filetype-plugin-on|. See |:packadd| for an
explanation. Otherwise, install vimwiki_pandoc in
`pack/*/start/vimwiki_pandoc`.
>
  if has('python3')
    packadd! vimwiki_docx
  endif
<

============================================================================
COMMANDS                                             *vimwiki_pandoc-commands*

----------------------------------------------------------------------------
COMMAND LINE SHELL                         *vimwiki_pandoc-command_line_shell*

Vimwiki_pandoc provides plain text pre-filters and pandoc filters for
use from the command line.

PRE-FILTERS                                       *vimwiki_pandoc-pre-filters*

                                                           *delete_bullet_star*
* `delete_bullet_star`: Remove unordered lists which use the star
  (asterisk) bullet marker. The pre-filter does not remove task list
  items (see |delete_task_pending|).
>
    echo '- Bulleted list item 1 should appear\n' \
     '* Bulleted list item 6 should NOT appear' |
    delete_bullet_star
<
>
    - Bulleted list item 6 should NOT appear
<
                                                          *delete_task_pending*
* `delete_task_pending`: Delete pending tasks.
>
    echo '- [ ] Bulleted list done0 item 0 should NOT appear' \
     '- [.] Bulleted list done1 item 1 should appear' |
    delete_task_pending
<
>
    - [.] Bulleted list done1 item 1 should appear
<

PANDOC FILTERS                                 *vimwiki_pandoc-pandoc_filters*

                                                             *delete_tag_lines*
* `delete_tag_lines`: Delete lines which only contain Vimwiki tags,
  e.g., ':tag1:tag2:'
                                                         *delete_empty_heading*
* `delete_empty_heading`:
                                                      *delete_taskwiki_heading*
* `delete_taskwiki_heading`:

----------------------------------------------------------------------------
LOCAL COMMANDS                                 *vimwiki_pandoc-local_commands*

These commands are only available (and meaningful) when you are
currently in a Vimwiki file.

VIMWIKICONVERT                                 *vimwiki_pandoc-vimwikiconvert*

                                                               *VimwikiConvert*
* `VimwikiConvert`: Convert the current Vimwiki buffer
                                                              *VimwikiConvert!*
* `VimwikiConvert!`: Convert and open with default viewer.

Convert the current Vimwiki |buffer| to the selected output format
(default: docx) specified in |g:vimwiki_pandoc_settings|.format.

Copy the path to the Word file to the clipboard register "+
|quoteplus|. On Windows Subsystem for Linux (WSL), convert the path
from POSIX to Windows before copying to clipboard.

Remove extraneous info:

* Vimwiki tag lines, e.g., :tag1:tag2:
* Not started tasks, e.g., - [ ] Task1
* Non-task _ bullet lines, e.g., _ [[URI|Description]] or *
  Text
* Remove empty parent/child headings.

VIMWIKICONVERTWEEK                         *vimwiki_pandoc-vimwikiconvertweek*

                                                           *VimwikiConvertWeek*
* `VimwikiConvertWeek`: Concatentate DiaryNotes for Monday through
  current buffer and convert.
                                                          *VimwikiConvertWeek!*
* `VimwikiConvertWeek!`: Concatenate, convert and open in default
  viewer.

After concatenating DiaryNotes for the week, behave as
|VimwikiConvert|.

============================================================================
OPTIONS                                               *vimwiki_pandoc-options*

----------------------------------------------------------------------------
SETTINGS                                             *vimwiki_pandoc-settings*

                                                    *g:vimwiki_pandoc_settings*
* `g:vimwiki_pandoc_settings`
  Optionally add the following to |vimrc| or, preferably,
  '~/.vim/plugin/vimwiki.vim'. Vimwiki_pandoc defaults to docx
  format, without extra_args.
>
    let g:vimwiki_pandoc_settings = {
      \ 'extra_args': [ '--shift-heading-level-by', '1',
      \ '--data-dir', '~/vimwiki_html/templates/'
      \ ],
      \ 'format': 'docx'
      \ }
<

============================================================================
DEVELOPMENT AND TESTING               *vimwiki_pandoc-development_and_testing*

Because pandoc is required, a conda environment called `pyscaffold` is
created. The default name may be overridden with the
`--name <environment name>` parameter.
>
  git clone https://github.com/jfishe/vimwiki_docx.git
  cd vimwiki_docx
  conda env create --file environment.yml --name pyscaffold
  conda activate pyscaffold
  pipx install covimerage
<

Covimerage has conflicting dependencies, so pipx creates an isolated
executable in `~/.local/bin`. You may want to run
`pipx uninstall covimerage` to avoid cluttering `$PATH`.
>
  tox -av # List tox commands and descriptions.
  tox --recreate # Build the package and run tests with python and Vader.
  tox -e vim # Run Vader tests and generate coverage report.
  # Run Vader tests and view results with Vim.
  vim -Nu tests/vim/vimrc -c 'Vader tests/vim/*.vader'
<
>
  <!-- pyscaffold-notes -->
<

============================================================================
NOTE                                                     *vimwiki_pandoc-note*

This project has been set up using PyScaffold 4.0.1. For details and
usage information on PyScaffold see https://pyscaffold.org/.

============================================================================
VIMWIKI_DOCX PACKAGE                     *vimwiki_pandoc-vimwiki_docx_package*

----------------------------------------------------------------------------
SUBPACKAGES                                       *vimwiki_pandoc-subpackages*

* vimwiki_docx.filter package
  * Submodules
  * vimwiki_docx.filter.delete_bullet_star module
  * vimwiki_docx.filter.delete_empty_heading module
  * vimwiki_docx.filter.delete_tag_lines module
  * vimwiki_docx.filter.delete_task_pending module
  * vimwiki_docx.filter.delete_taskwiki_heading module
  * vimwiki_docx.filter.do_nothing module
  * vimwiki_docx.filter.prefilter module
  * Module contents

----------------------------------------------------------------------------
SUBMODULES                                         *vimwiki_pandoc-submodules*

----------------------------------------------------------------------------
VIMWIKI_DOCX.CATVIMWIKI MODULE *vimwiki_pandoc-vimwiki_docx.catvimwiki_module*

Concatenate Vimwiki diary files.

vimwiki_docx.catvimwiki.catdiary(startdate: datetime.date, enddate:
datetime.date, wikidiary: Optional[pathlib.Path] = None) ->
pathlib.Path
>
  Concatenate Vimwiki diary files.
  Assume diary wiki files are named using ISO date, e.g.,
  2021-06-09.wiki.
  Parameters:
  :   -   startdate -- Starting date for Vimwiki diary entry.
      -   enddate -- End date date for Vimwiki diary entry.
      -   wikidiary -- Path to Vimwiki diary directory. Defaults to
          \$HOME/vimwiki/diary.
  Returns:
  :   Path to concatenated Vimwiki diary entries from startdate to
      enddate, inclusive of both.
  Return type:
  :   pathlib.Path
  Raises:
  :   ValueError -- If startdate is after enddate
<

vimwiki_docx.catvimwiki.del_empty_heading(wikifile: pathlib.Path,
reheading: str = \'\^(=+).+\1\s+((\1[\^=])|\Z)\')
>
  Remove empty headings from Vimwiki file.
  Apply Regex until no empty headings remain.
  Parameters:
  :   -   wikifile -- Path to Vimwiki to modify.
      -   reheading -- Regex to match empty headings. Substitute
          the regex with capture group 2.
  Returns: Return type: Path to modified Vimikwik file.
<

vimwiki_docx.catvimwiki.del_taskwiki_heading(wikifile: pathlib.Path,
reheading: str = \'\^(=+)([\^.+\s\1\$\')
>
  Remove taskwiki heading.
  wikifile : Path to Vimwiki to modify.
  reheading : Regex to match empty headings. Substitute the regex with
  capture group 2.
  Returns: Return type: Path to modified Vimikwik file.
<

vimwiki_docx.catvimwiki.get_last_monday(today: Optional[datetime.date]
= None) -> datetime.date
>
  Return datetime for closest Monday before today.
  Parameters:
  :   today -- Any date object
  Returns:
  :   Previous Monday before today, unless today is Monday.
  Return type:
  :   datetime.date
<

vimwiki_docx.catvimwiki.get_last_thursday(today:
Optional[datetime.date] = None) -> datetime.date
>
  Return datetime for closest Thursday before today.
  Parameters:
  :   today -- Any date object
  Returns:
  :   Previous Thursday before today, unless today is Thursday.
  Return type:
  :   datetime.date
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.CONVERT MODULE       *vimwiki_pandoc-vimwiki_docx.convert_module*

Process filters and convert to output format using pandoc.

vimwiki_docx.convert.convert(inputfile: str, outputfile: str, to: str =
\'markdown\', prefilters: Tuple[str, ...] = (\'delete_bullet_star\',
\'delete_task_pending\'), filters: Tuple[str, ...] =
(\'delete_tag_lines\', \'delete_empty_heading\',
\'delete_taskwiki_heading\'), extra_args: Tuple[str, ...] =
(\'--shift-heading-level-by\', \'1\', \'--data-dir\',
\'/home/jfishe/vimwiki_html/templates\')) -> None
>
  Convert Vimwiki with pandoc after applying prefilters and pandoc
  filters.
  Parameters:
  :   -   inputfile -- Vimwiki file absolute path
      -   outputfile -- Converted file absolute path
      -   to -- Pandoc output format. See pandoc
          --list-output-formats
      -   prefilters -- Selected Vimwiki stdio executable filters.
          See pydoc vimwiki_docx.convert for provided filters. Any
          executable that receives Vimwiki format as stdin and produces
          stdout should work.
      -   filters -- Selected pandoc filters. See pydoc
          vimwiki_docx.convert for provided filters. Any valid pandoc
          --filter <filter name> should work.
      -   extra_args -- Additional pandoc arguments and parameters.
          See pydoc pypandoc.convert_text for details and pandoc
          --help for valid content.
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.VIMWIKI_WEEK MODULE *vimwiki_pandoc-vimwiki_docx.vimwiki_week_module*

Convert str dates to datetime and Path. Set default days for missing
dates.

vimwiki_docx.vimwiki_week.concatenate_diary(diary_path: str, start_date:
Optional[str] = None, end_date: Optional[str] = None) ->
pathlib.Path
>
  Concatenate Vimwiki diary from start_date through end_date.
  If the start and end dates are None, concatenate Vimwiki Diary from
  Monday - Thursday. E.g., Thursday through Sunday returns this week.
  Monday - Wednesday returns last week.
  Parameters:
  :   -   diary_path -- Vimwiki Diary absolute path
      -   start_date -- ISO date, e.g., \'2017-10-10\', the same or
          earlier than end_date. Defaults to the previous Monday
          before end_date, unless end_date is Monday.
      -   end_date -- ISO date, e.g., \'2017-10-10\', defaults to
          the previous Thursday before today, unless today is Thursday.
  Returns:
  :   Path to concatenated Vimwiki diary file
  Return type:
  :   pathlib.Path
  Raises:
  :   ValueError -- catdiary() raises ValueError if start_date
      is after end_date
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.WIKI2PANDOC MODULE *vimwiki_pandoc-vimwiki_docx.wiki2pandoc_module*

Vim interface to convert Vimwiki to another format using pandoc.

vimwiki_docx.wiki2pandoc.wiki2pandoc(is_diary: str, is_concatenate: str,
to: str = \'docx\', end_date: Optional[str] = None, start_date:
Optional[str] = None, extra_args=None) -> str
>
  Bridged to Vim function Wiki2pandoc.
  Concatenate Diary Notes and/or convert Vimwiki Notes to selected
  format.
  Parameters:
  :   -   is_diary -- String containing a 0, False, or 1, True,
          whether current buffer is a Vimwiki DiaryNote.
>
    -   **is_concatenate** \-- String containing a 0, False, or 1,
        True, whether multiple Vimwiki DiaryNotes from start_date to
        end_date should concatenate before conversion. Otherwise
        convert the current buffer only and ignore the dates.
    -   **to** \-- Output format (defaults to docx)
    -   **end_date** \-- Depending on is_concatenate, the end date for
        concatenating Vimwiki DiaryNotes. Coerce an empty string,
        \"\", to None.
    -   **start_date** \-- Depending on is_concatenate, the start date
        for concatenating Vimwiki DiaryNotes. Coerce an empty string,
        \"\", to None.
    -   **extra_args** (*list*\* or \**str*) \--
        \"0\" or a list of valid pandoc arguments, e.g.,
        > \[\"\--shift-heading-level-by\", \"1\",
>
        > :   \"\--data-dir\", \"vimwiki_html/templates\"
>
        > \]
        See *pydoc pypandoc.convert_text* for details and *pandoc
        --help* for valid content.
<
  Returns:
  :   Absolute path to converted Vimwiki file
  Return type:
  :   str
<

----------------------------------------------------------------------------
MODULE CONTENTS                               *vimwiki_pandoc-module_contents*

============================================================================
VIMWIKI_DOCX.FILTER PACKAGE       *vimwiki_pandoc-vimwiki_docx.filter_package*

----------------------------------------------------------------------------
SUBMODULES                                         *vimwiki_pandoc-submodules*

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DELETE_BULLET_STAR MODULE *vimwiki_pandoc-vimwiki_docx.filter.delete_bullet_star_module*

Remove * bullet list items from unordered list.

Plain text filter

* Read stdin.
* Remove non-task * bullet lines, e.g., * [[URI|Description]]
  or * Text.
* Write filtered result to stdout.

vimwiki_docx.filter.delete_bullet_star.main()
>
  Filter stdio with action().
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DELETE_EMPTY_HEADING MODULE *vimwiki_pandoc-vimwiki_docx.filter.delete_empty_heading_module*

Remove empty headings from Vimwiki file.

Headings are not empty if they contain tag lines. Execute
delete_tag_lines.py first to empty such headings.

Pandoc filter using panflute

vimwiki_docx.filter.delete_empty_heading.action(elem, doc)
>
  Remove empty headings from Vimwiki file.
<

vimwiki_docx.filter.delete_empty_heading.finalize(doc)
>
  Post-filter.
<

vimwiki_docx.filter.delete_empty_heading.main(doc=None)
>
  Remove empty headings from Vimwiki file.
  Pandoc filter using panflute
<

vimwiki_docx.filter.delete_empty_heading.prepare(doc)
>
  Pre-filter.
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DELETE_TAG_LINES MODULE *vimwiki_pandoc-vimwiki_docx.filter.delete_tag_lines_module*

Remove Vimwiki tag lines, e.g., :tag1:tag2:.

Pandoc filter using panflute

vimwiki_docx.filter.delete_tag_lines.action(elem, doc)
>
  Remove Vimwiki tag lines, e.g., :tag1:tag2:.
  Pandoc filter using panflute
  In-line tags in paragraphs and lists remain.
<

vimwiki_docx.filter.delete_tag_lines.finalize(doc)
>
  Post-filter.
<

vimwiki_docx.filter.delete_tag_lines.main(doc=None)
>
  Remove taskwiki heading.
  Pandoc filter using panflute
<

vimwiki_docx.filter.delete_tag_lines.prepare(doc)
>
  Pre-filter.
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DELETE_TASK_PENDING MODULE *vimwiki_pandoc-vimwiki_docx.filter.delete_task_pending_module*

Remove Pending and Waiting tasks and set Start tasks to [.]{.done1}.

Plain text filter

* Read stdin.
* Remove Pending [ ] and Waiting [W] tasks.
* Change Start [S] task to [.].
* Write filtered result to stdout.

-[ Example ]-

bash> echo \'1. [ ] Numbered list done0 item 0 should NOT appearn\'

bash> \'2. [.] Numbered list done1 item 1 should appear\' |

bash> delete_task_pending

1.   [.] Numbered list done1 item 1 should appear

vimwiki_docx.filter.delete_task_pending.main()
>
  Filter stdio with action().
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DELETE_TASKWIKI_HEADING MODULE *vimwiki_pandoc-vimwiki_docx.filter.delete_taskwiki_heading_module*

Remove taskwiki heading.

Pandoc filter using panflute

-[ Example ]-

bash> echo \'== Taskwiki Viewports | should not appear | should not
appear ==\' |

bash> pandoc --from=vimwiki --to=markdown
--filter=delete_taskwiki_heading

----------------------------------------------------------------------------
TASKWIKI VIEWPORTS {#TASKWIKI VIEWPORTS } *vimwiki_pandoc-taskwiki_viewports_{#taskwiki_viewports_}*

vimwiki_docx.filter.delete_taskwiki_heading.action(elem, doc)
>
  Remove taskwiki heading.
<

vimwiki_docx.filter.delete_taskwiki_heading.finalize(doc)
>
  Post-filter---do nothing.
<

vimwiki_docx.filter.delete_taskwiki_heading.main(doc=None)
>
  Remove taskwiki heading.
  Pandoc filter using panflute
<

vimwiki_docx.filter.delete_taskwiki_heading.prepare(doc)
>
  Pre-filter---do nothing.
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.DO_NOTHING MODULE *vimwiki_pandoc-vimwiki_docx.filter.do_nothing_module*

Return the input with no changes.

Plain text filter

vimwiki_docx.filter.do_nothing.main()
>
  Filter stdio with prefilter().
<

----------------------------------------------------------------------------
VIMWIKI_DOCX.FILTER.PREFILTER MODULE *vimwiki_pandoc-vimwiki_docx.filter.prefilter_module*

Main function shared by prefilters.

vimwiki_docx.filter.prefilter.action(line: str, delete: Optional[str]
= None, replace: Optional[Tuple[str, str]] = None) ->
Optional[str]
>
  Filter Vimwiki text by deleting lines or replacing text in lines.
  Parameters:
  :   -   line -- Line from Vimwiki file.
      -   delete -- Regex string matching all or part of line to be
          deleted.
      -   replace -- Regex re.search string and replacement string
          for re.sub.
  Returns:
  :   Convert line matching replace[0] regex by substituting
      replace[1]. To delete line matching delete regex, return None.
      Otherwise return the original line. Replace precedes delete.
  Return type:
  :   str or None
<

vimwiki_docx.filter.prefilter.prefilter(delete: Optional[str] = None,
replace: Optional[Tuple[str, str]] = None) -> None
>
  Read stdin, filter with action() to stdout.
  Parameters:
  :   -   delete -- Regex string matching all or part of line to be
          deleted.
      -   replace -- Regex re.search string and replacement string
          for re.sub.
<

----------------------------------------------------------------------------
MODULE CONTENTS                               *vimwiki_pandoc-module_contents*



    vim:textwidth=78:tabstop=4:filetype=help:norightleft: